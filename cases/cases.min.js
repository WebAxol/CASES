class Service{constructor(){this.world=new World}execute(){return!1}init(){return!1}}class ServiceManager{#a;constructor(e){this.world=e,this.#a={}}registerService(e,t){if(this.#a[e])return console.warn(`Service named '${e}' already registered`),!1;if(!t||null==t)throw Error(`Cannot register invalid or null service '${e}'`);t.world=this.world,this.#a[e]=t,this.#a[e].init()}getServices(){return this.#a}getService(e){if(this.#a[e])return this.#a[e];throw Error(`Cannot get unregistered service '${e}'`)}}class EventManager{constructor(e){this.world=e,this.events={}}registerEvent(e){if(this.events[e])return console.warn(`Event named '${e} has already been registered'`),!1;this.events[e]={}}registerServiceToEvent(e,t){if(!this.events[t])return console.warn(`Cannot register service '${e}' to unregistered event '${t}'`),!1;var o=this.world.getService(e);return o?"function"!=typeof o[`on${t}`]?(console.warn(`Cannot register service '${e}' to event, because the service does not have a method 'on${t}'`),!1):void(this.events[t][e]=o):(console.warn(`Cannot register service '${e}' to event, because the service is not registered to the framework`),!1)}notifyToServices(e,t){if(!this.events[e])return console.warn(`Cannot notify event '${e}' because it does not exist`),!1;WORLD.getService("AgentBehaviour"),Object.keys(this.events[e]).forEach(o=>{this.world.getService(o)[`on${e}`](t)})}}class CollectionManager{#b;constructor(e){this.world=e,this.#b={},this.toBeRemoved=[],this._objectPool=[]}registerCollection(e){return this.#b[e]?(console.warn(`Collection named '${e}' already registered`),!1):(this.#b[e]=[],this)}getCollection(e){return this.#b[e]?this.#b[e]:(console.warn(`Cannot get unregistered collection '${e}'`),!1)}addToCollection(e,t){if(!this.#b[e])return console.warn(`collection named '${e} is not registered'`),!1;if(t.isInCollection(e))throw Error(`The agent is already registered to collection ${e}`);this.#b[e].push(t),t.addCollection(e)}cacheToBeRemoved(e,t){var o;this._objectPool.length>0?((o=this._objectPool.pop()).collectionName=e,o.agent=t,this.toBeRemoved.push(o)):this.toBeRemoved.push({collectionName:e,agent:t})}removeFromCollection(e,t){let o=this.#b[e].indexOf(t);this.#b[e].splice(o,1),t.removeCollection(e)}removeAgentsFromCollections(){for(;this.toBeRemoved.length>0;){let e=this.toBeRemoved.pop();this.removeFromCollection(e.collectionName,e.agent),e.collectionName=void 0,e.agent=void 0,this._objectPool.push(e)}}}class AgentPool{#c;#d;constructor(e){this.world=e,this.#c={},this.#d={},this.toBeRemoved=[]}registerType(e,t){if(this.#c[e])return console.warn(`The type named '${e}' has already been registered`),!1;this.#c[e]=t,this.#d[e]=[]}createAgent(e,t){this.world;class o{#e;#b;constructor(e,t){this._children={},this.#b={},this.#e=e,t.info&&Object.keys(t.info).forEach(e=>{let o=t.info[e];"object"==typeof o?this[e]=Object.assign({},o):this[e]=o})}getType(){return this.#e}isInCollection(e){return this.#b[e]}getCollections(){return Object.keys(this.#b)}addCollection(e){this.#b[e]=1}removeCollection(e){delete this.#b[e]}reset(e){Object.keys(e.info).forEach(t=>{let o=e.info[t];"object"==typeof o?this[t]=Object.assign({},o):this[t]=o})}}var i=new o(e,this.#c[e]);return this.#d[e].length>0?(i=this.#d[e].pop(),this.resetAgent(i)):i=new o(e,this.#c[e]),Object.keys(t.info).forEach(e=>{void 0!=t.info[e]&&(i[e]=t.info[e])}),i}getCollectionsOfType(e){return this.#c[e]?this.#c[e].collections||[]:(console.warn(`Cannot get collections from unexisting type '${typename}'`),!1)}storeToBeRemoved(e){this.toBeRemoved.push(e)}removeAgent(e){try{let t=e.getType();e.getCollections().forEach(t=>{this.world.removeFromCollection(t,e)});let o=Object.keys(e._children);for(;o.length;)this.removeAgent(e._children[o[0]]),delete e._children[o[0]],o.shift();this.#d[t].push(e)}catch(i){throw Error(`Error, agent ${e}`)}}removeAgents(){for(;this.toBeRemoved.length;){let e=this.toBeRemoved.pop();this.removeAgent(e)}}resetAgent(e){let t=this.#c[e.getType()];e.reset(t)}}class World{#f;#g;#h;#i;constructor(){this.#f=new AgentPool(this),this.#g=new CollectionManager(this),this.#i=new EventManager(this),this.#h=new ServiceManager(this),this.frame=0,this.routine=()=>{},this.pause=!1}registerService(e,t){return this.#h.registerService(e,t)}getServices(){return this.#h.getServices()}getService(e){return this.#h.getService(e)}registerCollection(e){return this.#g.registerCollection(e)}getCollection(e){return this.#g.getCollection(e)}addToCollection(e,t){return this.#g.addToCollection(e,t)}removeFromCollection(e,t){return this.#g.cacheToBeRemoved(e,t)}registerAgentType(e,t){this.#f.registerType(e,t)}createAgent(e,t){let o=this.#f.createAgent(e,t);return this.#f.getCollectionsOfType(e).forEach(e=>{this.addToCollection(e,o)}),o}removeAgent(e){this.#f.storeToBeRemoved(e)}registerEvent(e){this.#i.registerEvent(e)}registerServiceToEvent(e,t){this.#i.registerServiceToEvent(e,t)}notifyEvent(e,t){this.#i.notifyToServices(e,t)}execute(){if(!this.pause){requestAnimationFrame(()=>{this.execute()}),this.#f.removeAgents(),this.#g.removeAgentsFromCollections();var e=this.getServices();Object.keys(e).forEach(t=>{e[t].execute()}),this.pause||(this.frame++,this.routine(this))}}pauseExecution(){this.pause=!0}}